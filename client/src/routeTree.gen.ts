/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as VoiceChatImport } from './routes/voice-chat'
import { Route as TrainingchatImport } from './routes/trainingchat'
import { Route as DashboardImport } from './routes/dashboard'
import { Route as AuthImport } from './routes/auth'

// Create/Update Routes

const VoiceChatRoute = VoiceChatImport.update({
  id: '/voice-chat',
  path: '/voice-chat',
  getParentRoute: () => rootRoute,
} as any)

const TrainingchatRoute = TrainingchatImport.update({
  id: '/trainingchat',
  path: '/trainingchat',
  getParentRoute: () => rootRoute,
} as any)

const DashboardRoute = DashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const AuthRoute = AuthImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardImport
      parentRoute: typeof rootRoute
    }
    '/trainingchat': {
      id: '/trainingchat'
      path: '/trainingchat'
      fullPath: '/trainingchat'
      preLoaderRoute: typeof TrainingchatImport
      parentRoute: typeof rootRoute
    }
    '/voice-chat': {
      id: '/voice-chat'
      path: '/voice-chat'
      fullPath: '/voice-chat'
      preLoaderRoute: typeof VoiceChatImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/auth': typeof AuthRoute
  '/dashboard': typeof DashboardRoute
  '/trainingchat': typeof TrainingchatRoute
  '/voice-chat': typeof VoiceChatRoute
}

export interface FileRoutesByTo {
  '/auth': typeof AuthRoute
  '/dashboard': typeof DashboardRoute
  '/trainingchat': typeof TrainingchatRoute
  '/voice-chat': typeof VoiceChatRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/auth': typeof AuthRoute
  '/dashboard': typeof DashboardRoute
  '/trainingchat': typeof TrainingchatRoute
  '/voice-chat': typeof VoiceChatRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/auth' | '/dashboard' | '/trainingchat' | '/voice-chat'
  fileRoutesByTo: FileRoutesByTo
  to: '/auth' | '/dashboard' | '/trainingchat' | '/voice-chat'
  id: '__root__' | '/auth' | '/dashboard' | '/trainingchat' | '/voice-chat'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AuthRoute: typeof AuthRoute
  DashboardRoute: typeof DashboardRoute
  TrainingchatRoute: typeof TrainingchatRoute
  VoiceChatRoute: typeof VoiceChatRoute
}

const rootRouteChildren: RootRouteChildren = {
  AuthRoute: AuthRoute,
  DashboardRoute: DashboardRoute,
  TrainingchatRoute: TrainingchatRoute,
  VoiceChatRoute: VoiceChatRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/auth",
        "/dashboard",
        "/trainingchat",
        "/voice-chat"
      ]
    },
    "/auth": {
      "filePath": "auth.tsx"
    },
    "/dashboard": {
      "filePath": "dashboard.tsx"
    },
    "/trainingchat": {
      "filePath": "trainingchat.tsx"
    },
    "/voice-chat": {
      "filePath": "voice-chat.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
